package one.lindegaard.Core.rewards;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.HashMap;
import java.util.Iterator;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.event.Listener;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.plugin.Plugin;

import one.lindegaard.Core.Core;
import one.lindegaard.Core.Tools;
import one.lindegaard.Core.materials.Materials;
import one.lindegaard.Core.rewards.Reward;
import one.lindegaard.Core.rewards.RewardBlock;

public class RewardBlockManager implements Listener {

	private Plugin plugin;
	private File file;
	private YamlConfiguration config = new YamlConfiguration();

	private HashMap<Integer, RewardBlock> rewardBlocks = new HashMap<Integer, RewardBlock>();

	public RewardBlockManager(Plugin plugin) {
		this.plugin = plugin;
		file = new File(plugin.getDataFolder().getParent(), "BagOfGold/rewards.yml");
		load();
		Bukkit.getPluginManager().registerEvents(this, plugin);
	}

	/**
	 * Remove the Reward block from the world and clean up in saved rewards.
	 * 
	 * @param block
	 */
	public void removeReward(Block block) {
		if (Reward.isReward(block)) {
			Reward reward = Reward.getReward(block);
			Core.getMessages().debug("Removing block from world (id=%s)", reward.getUniqueID());
			block.getDrops().clear();
			block.setType(Material.AIR);
			block.removeMetadata(Reward.MH_REWARD_DATA_NEW, plugin);
			if (rewardBlocks.containsKey(reward.getUniqueID())) {

			}
		}
	}

	public void addReward(Block block, Reward reward) {
		block.setMetadata(Reward.MH_REWARD_DATA_NEW, new FixedMetadataValue(plugin, reward));
		rewardBlocks.put(reward.getUniqueID(), new RewardBlock(block.getLocation(), reward));
	}

	public int getNextID() {
		int max = 0;
		for (int n : rewardBlocks.keySet())
			max = Math.max(max, n);
		return max + 1;
	}

	public void save() {
		int n = 0;
		try {
			config.options().header(
					"This is the rewards placed as blocks. Do not edit this file manually! If you remove a section the reward will loose its value on next server restart.");
			Iterator<Integer> itr = rewardBlocks.keySet().iterator();
			while (itr.hasNext()) {
				Integer id = itr.next();
				Location location = rewardBlocks.get(id).getLocation();
				Reward reward = rewardBlocks.get(id).getReward();

				if (location != null && Materials.isSkull(location.getBlock().getType())) {
					ConfigurationSection section = config.createSection(id.toString());
					section.set("location", location.clone());
					reward.save(section);
					config.save(file);
					n++;
				} else {
					config.set(id.toString(), null);
					rewardBlocks.remove(reward.getUniqueID());
				}
			}
			if (n > 0)
				Core.getMessages().debug("Saved %s rewards to disk", n);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void load() {
		int n = 0;
		int deleted = 0;
		try {
			if (file.exists())
				config.load(file);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InvalidConfigurationException e) {
			e.printStackTrace();
		}

		try {
			for (String key : config.getKeys(false)) {
				ConfigurationSection section = config.getConfigurationSection(key);
				Reward reward = new Reward();
				reward.read(section);
				Location location = (Location) section.get("location");
				for (RewardBlock rb : rewardBlocks.values()) {
					if (rb.equals(new RewardBlock(location, reward)))
						continue;
				}
				if (location != null && Materials.isSkull(location.getBlock().getType())) {
					n++;
					reward.setUniqueID(n);
					location.getBlock().setMetadata(Reward.MH_REWARD_DATA_NEW,
							new FixedMetadataValue(plugin, new Reward(reward)));
					rewardBlocks.put(n, new RewardBlock(location, reward));
					if (Tools.isUUID(key)) {
						deleted++;
						config.set(key, null);
					}
				} else {
					// This block is not a PLAYER_HEAD, delete the section.
					deleted++;
					config.set(key, null);
				}
			}
		} catch (InvalidConfigurationException e) {
			e.printStackTrace();
		}

		try {

			if (deleted > 0) {
				Core.getMessages().debug("Deleted %s rewards from the rewards.yml file", deleted);
				File file_copy = new File(plugin.getDataFolder(), "rewards.yml.old");
				Files.copy(file.toPath(), file_copy.toPath(), StandardCopyOption.COPY_ATTRIBUTES,
						StandardCopyOption.REPLACE_EXISTING);
				config.save(file);
			}
			if (n > 0) {
				Core.getMessages().debug("Loaded %s rewards from the BagOfGold/rewards.yml file", n);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

		// Import files from MobHunting to BagOfGold/rewards.yml
		File file2 = new File(plugin.getDataFolder().getParent(), "MobHunting/rewards.yml");
		if (file2.exists()) {
			Core.getMessages().debug("Loading rewards from MobHunting first time.");
			migrateRewardsFromMobHunting(file2);
		}
	}

	private void migrateRewardsFromMobHunting(File file) {
		if (!file.exists())
			return;

		YamlConfiguration mobhunting_rewards = new YamlConfiguration();
		int n = 0;

		try {
			mobhunting_rewards.load(file);
		} catch (IOException | InvalidConfigurationException e1) {
			e1.printStackTrace();
		}

		try {
			for (String key : mobhunting_rewards.getKeys(false)) {
				ConfigurationSection section = mobhunting_rewards.getConfigurationSection(key);
				Reward reward = new Reward();
				reward.read(section);
				Location location = (Location) section.get("location");
				for (RewardBlock rb : rewardBlocks.values()) {
					if (rb.equals(new RewardBlock(location, reward)))
						continue;
				}
				if (location != null && Materials.isSkull(location.getBlock().getType())) {
					n++;
					reward.setUniqueID(n);
					location.getBlock().setMetadata(Reward.MH_REWARD_DATA_NEW,
							new FixedMetadataValue(plugin, new Reward(reward)));
					rewardBlocks.put(n, new RewardBlock(location, reward));
				}
			}
		} catch (InvalidConfigurationException e) {
			e.printStackTrace();
		}
		if (n > 0) {
			Core.getMessages().debug("Loaded %s rewards from the MobHunting/rewards.yml file." + ChatColor.RED
					+ " Renaming MobHunting/rewards.yml to MobHunting/rewards.yml.old", n);
			file.renameTo(new File(file.getPath() + ".old"));
		}

	}

}
